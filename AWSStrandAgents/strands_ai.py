import logging
from utils.model import ModelSelector
from strands import Agent
import asyncio

logging.getLogger("strands").setLevel(logging.INFO)

logging.basicConfig(
    format="%(levelname)s | %(name)s | %(message)s",
    handlers=[logging.StreamHandler()]
)

model = ModelSelector('Sonnet3.7').get_model()

# Instrucciones para el agente estudiante
CloudStudent_Instructions = """
Eres Alex, un estudiante entusiasta de ciencias de la computaci√≥n que est√° aprendiendo sobre computaci√≥n en la nube.
Tu personalidad y comportamiento:
    ‚Ä¢ Eres curioso y haces preguntas reflexivas sobre conceptos de computaci√≥n en la nube
    ‚Ä¢ Muestras gran inter√©s por las plataformas AWS, Azure y Google Cloud
    ‚Ä¢ Formulas preguntas de seguimiento basadas en las respuestas del profesor
    ‚Ä¢ Mantienes las preguntas enfocadas y con fines educativos
    ‚Ä¢ SIEMPRE terminas cada mensaje con una pregunta espec√≠fica
    ‚Ä¢ Construyes sobre las respuestas anteriores del profesor
    ‚Ä¢ Despu√©s de 4-5 intercambios, agradeces al profesor y preguntas por recursos adicionales

IMPORTANTE: 
- Responde SOLO como Alex el estudiante
- NO act√∫es como el profesor
- Mant√©n un tono respetuoso pero entusiasta
- Haz UNA pregunta espec√≠fica por mensaje
"""

# Instrucciones para el agente profesor
CloudProfessor_Instructions = """
Eres la Dr. Mar√≠a Gonz√°lez, una profesora experimentada en computaci√≥n en la nube con 15 a√±os de experiencia en AWS, Azure y Google Cloud.
Tu personalidad y comportamiento:
    ‚Ä¢ Brindas explicaciones claras y educativas sobre conceptos de computaci√≥n en la nube
    ‚Ä¢ Usas ejemplos del mundo real y analog√≠as para explicar conceptos complejos
    ‚Ä¢ Fomentas el aprendizaje continuo y la exploraci√≥n
    ‚Ä¢ Respondes preguntas de forma acad√©mica pero accesible
    ‚Ä¢ Mantienes las respuestas concisas pero informativas (m√°ximo 2-3 p√°rrafos)
    ‚Ä¢ Gu√≠as la conversaci√≥n hacia aplicaciones pr√°cticas de la computaci√≥n en la nube
    ‚Ä¢ Ocasionalmente haces preguntas al estudiante para verificar comprensi√≥n

IMPORTANTE:
- Responde SOLO como la Dr. Gonz√°lez
- NO act√∫es como el estudiante
- S√© paciente y did√°ctica
- Proporciona ejemplos concretos cuando sea posible
"""

# Crear los agentes
cloud_student = Agent(
    system_prompt=CloudStudent_Instructions,
    model=model
)

cloud_professor = Agent(
    system_prompt=CloudProfessor_Instructions,
    model=model
)

class CloudConversationManager:
    def __init__(self, student_agent, professor_agent):
        self.student = student_agent
        self.professor = professor_agent
        self.conversation_history = []
        self.turn_count = 0
        self.max_turns = 4
        
    def should_end_conversation(self, message):
        end_keywords = [
            "gracias por todo", "muchas gracias", "ha sido muy √∫til",
            "recursos adicionales", "seguir aprendiendo", "esto es todo",
            "terminar", "concluir", "despedida", "excelente explicaci√≥n"
        ]
        return any(keyword in message.lower() for keyword in end_keywords)
    
    async def run_conversation(self):
        print("üéì === Sesi√≥n de Tutor√≠a: Computaci√≥n en la Nube ===")
        print("üë®‚Äçüè´ Dr. Mar√≠a Gonz√°lez (Profesora) ‚ÜîÔ∏è üéì Pedro (Estudiante)")
        print("=" * 70)
        
        # El estudiante inicia la conversaci√≥n
        current_speaker = "student"
        
        # Mensaje inicial del estudiante
        print("üéì Pedro est√° iniciando la conversaci√≥n...")
        initial_question = await self.get_agent_response(
            self.student, 
            "Inicia una conversaci√≥n preguntando sobre computaci√≥n en la nube. Haz una pregunta espec√≠fica para comenzar."
        )
        
        print(f"üéì Pedro: {initial_question}")
        print("-" * 70)
        
        self.conversation_history.append(f"Estudiante: {initial_question}")
        current_speaker = "professor"
        self.turn_count += 1
        
        # Continuar la conversaci√≥n
        while self.turn_count < self.max_turns:
            
            if current_speaker == "professor":
                # Turno del profesor
                context = "\n".join(self.conversation_history[-4:])  # √öltimos 4 mensajes para contexto
                prompt = f"Contexto de la conversaci√≥n:\n{context}\n\nResponde como profesora a la √∫ltima pregunta del estudiante."
                
                response = await self.get_agent_response(self.professor, prompt)
                print(f"üë®‚Äçüè´ Dr. Gonz√°lez: {response}")
                
                self.conversation_history.append(f"Profesora: {response}")
                current_speaker = "student"
                
            else:
                # Turno del estudiante
                context = "\n".join(self.conversation_history[-4:])  # √öltimos 4 mensajes para contexto
                prompt = f"Contexto de la conversaci√≥n:\n{context}\n\nResponde como estudiante a la explicaci√≥n del profesor y haz una nueva pregunta."
                
                response = await self.get_agent_response(self.student, prompt)
                print(f"üéì Alex: {response}")
                
                self.conversation_history.append(f"Estudiante: {response}")
                current_speaker = "professor"
                
                # Verificar si el estudiante quiere terminar
                if self.should_end_conversation(response):
                    print("\nüéØ Alex est√° listo para concluir la sesi√≥n...")
                    # Respuesta final del profesor
                    final_context = "\n".join(self.conversation_history[-3:])
                    final_prompt = f"Contexto:\n{final_context}\n\nDa una respuesta final como profesora, incluyendo recursos adicionales para que el estudiante siga aprendiendo."
                    
                    final_response = await self.get_agent_response(self.professor, final_prompt)
                    print(f"üë®‚Äçüè´ Dr. Gonz√°lez: {final_response}")
                    break
            
            print("-" * 70)
            self.turn_count += 1
            
            # Pausa para evitar rate limiting
            await asyncio.sleep(1)
        
        if self.turn_count >= self.max_turns:
            print(f"\n‚è∞ Sesi√≥n completada despu√©s de {self.turn_count} intercambios.")
        
        print(f"\nüìä Resumen de la sesi√≥n:")
        print(f"   ‚Ä¢ Total de intercambios: {len(self.conversation_history)}")
        print(f"   ‚Ä¢ Tema: Computaci√≥n en la nube")
        print(f"   ‚Ä¢ Participantes: Alex (Estudiante) y Dr. Gonz√°lez (Profesora)")
    
    async def get_agent_response(self, agent, prompt):
        """Obtiene respuesta de un agente espec√≠fico"""
        try:
            # Llamar al agente y manejar el resultado correctamente
            result = agent(prompt)
            
            # Diferentes formas de acceder al contenido seg√∫n la estructura de AgentResult
            if hasattr(result, 'content'):
                return str(result.content).strip()
            elif hasattr(result, 'text'):
                return str(result.text).strip()
            elif hasattr(result, 'message'):
                return str(result.message).strip()
            elif hasattr(result, 'response'):
                return str(result.response).strip()
            else:
                # Si no encontramos el atributo correcto, convertir a string
                return str(result).strip()
                
        except Exception as e:
            print(f"Debug - Error details: {e}")
            print(f"Debug - Result type: {type(result) if 'result' in locals() else 'No result'}")
            print(f"Debug - Result attributes: {dir(result) if 'result' in locals() else 'No result'}")
            return f"Error al obtener respuesta: {e}"

async def start_cloud_conversation():
    """Inicia la conversaci√≥n entre los agentes"""
    print("üöÄ Iniciando Sistema de Tutor√≠a Inteligente")
    print("   Tema: Computaci√≥n en la Nube")
    print()
    
    try:
        conversation_manager = CloudConversationManager(cloud_student, cloud_professor)
        await conversation_manager.run_conversation()
        print("\n‚úÖ Sesi√≥n de tutor√≠a finalizada exitosamente")
        
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Sesi√≥n interrumpida por el usuario")
    except Exception as e:
        print(f"\n‚ùå Error durante la sesi√≥n: {e}")
        print("\nüîß Verificar la configuraci√≥n del modelo y conexi√≥n")

def main():
    """Funci√≥n principal que ejecuta la conversaci√≥n"""
    print("\n=== CloudCamp: Tutor√≠a Inteligente ===")
    print("Conversaci√≥n entre Agentes de IA sobre Computaci√≥n en la Nube")
    print("Presiona Ctrl+C para interrumpir en cualquier momento\n")
    
    # Ejecutar la conversaci√≥n as√≠ncrona
    asyncio.run(start_cloud_conversation())

# Verificar si el script se ejecuta directamente
if __name__ == "__main__":
    main()